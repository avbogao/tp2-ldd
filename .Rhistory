k = 5
)
set.seed(32)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T,prob=c(0.5,0.5))
train_fn  <- fake_news[sample_fn, ]
test_fn   <- fake_news[!sample_fn, ]
# Clasificador con kNN
test_pred_k5 = knn(
train = train_fn[,c("title_words","title_has_excl","negative")],
test = test_fn[,c("title_words","title_has_excl","negative")],
cl = test_fn$type,
k = 5
)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T)
train_fn  <- fake_news[sample_fn, ]
test_fn   <- fake_news[!sample_fn, ]
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T)
train_fn  <- fake_news[sample_fn, ]
set.seed(32)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T)
train_fn  <- fake_news[sample_fn, ]
test_fn   <- fake_news[!sample_fn, ]
set.seed(32)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T)
train_fn  <- fake_news[sample_fn, ]
test_fn   <- fake_news[!sample_fn, ]
set.seed(32)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T)
train_fn  <- fake_news[sample_fn, ]
test_fn   <- fake_news[!sample_fn, ]
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T,prob(0.5,0.5))
set.seed(32)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T,prob(0.5,0.5))
train_fn  <- fake_news[sample_fn, ]
set.seed(32)
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T,prob=c(0.5,0.5))
train_fn  <- fake_news[sample_fn, ]
test_fn   <- fake_news[!sample_fn, ]
sample_fn = sample(c(TRUE, FALSE), nrow(fake_news), replace = T,prob=0.5)
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
library(tidyr)
library(tidyverse)
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
library(dplyr)
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, color = type))+
geom_point()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
library(ggplot2)
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, color = type))+
geom_point()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, color = type))+
geom_bar()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, color = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, color = type))+
geom_point()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, color = type))+
geom_point()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de noticias por % de expresiones negativas
fake_news %>%
group_by(type)%>%
count(categoria_negativa)%>%
ggplot(aes(x=categoria_negativa, y = n, color = type))+
geom_point()+
labs(title = 'Cantidad de noticias que contienen % expresiones negativas en el titulo', x= '% contenido', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de noticias por % de expresiones negativas (v2)
fake_news %>%
group_by(type)%>%
count(categoria_negativa)%>%
ggplot(aes(x=categoria_negativa, y = n, color = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen % expresiones negativas en el titulo', x= '% contenido', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de noticias por % de expresiones negativas (v2)
fake_news %>%
group_by(type)%>%
count(categoria_negativa)%>%
ggplot(aes(x=categoria_negativa, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen % expresiones negativas en el titulo', x= '% contenido', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de palabras en el titulo
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, color = type))+
geom_point()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
#Cantidad de palabras en el titulo (v2 idem anterior)
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
#Cantidad de palabras en el titulo (v2 idem anterior)
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = reorder(type, -n)))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
type
#Cantidad de palabras en el titulo (v2 idem anterior)
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(cantidad_palabras_titulo, type) %>%
summarise(n = n()) %>%
ggplot(aes(x = cantidad_palabras_titulo, y = n, fill = type)) +
geom_bar(stat = "identity") +
labs(title = 'Cantidad de palabras en el título', x = 'Cantidad de palabras en el título', y = 'Cantidad de noticias') +
theme(plot.title = element_text(face = 'bold'))
#Cantidad de palabras en el titulo (v2 idem anterior)
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
## Quizas asi se visualiza mejor
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de noticias por % de expresiones negativas (v2 idem anterior)
fake_news %>%
group_by(type)%>%
count(categoria_negativa)%>%
ggplot(aes(x=categoria_negativa, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen % expresiones negativas en el titulo', x= '% contenido', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de palabras en el titulo (v2 idem anterior)
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
#reduzco base para trabajar mejor
fake_news2 = fake_news %>%
select(type, title_has_excl, negative, title_words)
#BASES TRAIN Y TEST
set.seed(123)
fakenews_train = fake_news2 %>%
sample_frac(0.8,replace = F)
fakenews_test = anti_join(fake_news2,df_train)
k = 1:120
resultado = data.frame(k, precision = 0)
for (n in k){
fakenews_test_prediccion = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
resultado$precision[n] = mean(fakenews_test_prediccion == fakenews_test[, 1])
}
library(class)
for (n in k){
fakenews_test_prediccion = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
resultado$precision[n] = mean(fakenews_test_prediccion == fakenews_test[, 1])
}
#BASES TRAIN Y TEST
set.seed(123)
fakenews_train = fake_news2 %>%
sample_frac(0.8,replace = F)
fakenews_test = anti_join(fake_news2,df_train) #??
for (n in k){
fakenews_test_prediccion = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
resultado$precision[n] = mean(fakenews_test_prediccion == fakenews_test[, 1])
}
library(ggplot2)
library(class)
library(rpart)
library(rpart.plot)
library(tidyverse)
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
library(dplyr)
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(categoria_negativa)%>%
ggplot(aes(x=categoria_negativa, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen % expresiones negativas en el titulo', x= '% contenido', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de palabras en el titulo
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
#reduzco base para trabajar mejor
fake_news2 = fake_news %>%
select(type, title_has_excl, negative, title_words)
#BASES TRAIN Y TEST
set.seed(123)
fakenews_train = fake_news2 %>%
sample_frac(0.8,replace = F)
fakenews_test = anti_join(fake_news2,fakenews_train) #??
k = 1:120
resultado = data.frame(k, precision = 0)
for (n in k){
fakenews_model = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
resultado$precision[n] = mean(fakenews_model == fakenews_test[, 1])
}
k_maximo = resultado$k[order(resultado$precision, decreasing = TRUE)[1]]
fakenews_model_kmax = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_maximo)
precision_kmax = mean(fakenews_model_kmax == fakenews_test[, 1])
#MATRIZ DE CONFUSION
table(fakenews_model_kmax,fakenews_test[, 1])
k_segundo = resultado$k[order(resultado$precision, decreasing = TRUE)[2]]
fakenews_model_2k = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_segundo)
precision_2k = mean(fakenews_model_2k == fakenews_test[, 1])
#MATRIZ DE CONFUSION
table(fakenews_model_2k,fakenews_test[, 1])
#GRAFICO DE EVOLUCION DE LAS K EN FUNCION DE LA PRECISION
resultado %>%
ggplot(aes(k,precision))+
geom_line()+
geom_vline(xintercept = k_maximo,
linetype = 2,
color = 2)+
geom_vline(xintercept = k_segundo,
linetype = 2,
color= 4)+
geom_hline(yintercept = precision_kmax,
linetype = 2,
color = 2)+
geom_hline(yintercept = precision_2k,
linetype = 2,
color= 4)+
geom_point(aes(k_maximo,precision_kmax), color = 'red')+
geom_point(aes(k_segundo,precision_2k), color = 'blue')+
labs(title = 'Evolución de la precisión según K elegido para el modelo')
#modelo
arbol_fake = rpart(type~., data = fakenews_train)
#grafico del modelo
rpart.plot(arbol_fake)
#predicción
fakenews_test$pred_arbol=predict(arbol_fake,fakenews_test,type = 'class')
#matriz de confusión
table(fakenews_test$pred_arbol,fakenews_test$type)
#precisión del modelo
precision_arbol = 100*mean(fakenews_test$pred_arbol==fakenews_test$type)
new_data = data.frame(type = NA,
title_has_excl= FALSE,
negative = 6.00,
title_words = 15)
prob_kmax = predict(fakenews_model_kmax, newdata = new_data, type='prob')
#con k=segundo
prob_2k = predict(fakenews_model_2k, new_data, type = 'prob')
library(kknn)
library(class)
library(kknn)
k_segundo = resultado$k[order(resultado$precision, decreasing = TRUE)[2]]
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
fake_news %>%
group_by(type)%>%
count(title_has_excl)%>%
ggplot(aes(x=title_has_excl, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen signos de exclamación', x= 'Contiene o no contiene', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
fake_news %>%
group_by(type)%>%
count(categoria_negativa)%>%
ggplot(aes(x=categoria_negativa, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de noticias que contienen % expresiones negativas en el titulo', x= '% contenido', y='Cantidad')+
theme(plot.title = element_text(face='bold'))
#Cantidad de palabras en el titulo
fake_news %>%
group_by(type)%>%
count(cantidad_palabras_titulo)%>%
ggplot(aes(x=cantidad_palabras_titulo, y = n, fill = type))+
geom_col()+
labs(title = 'Cantidad de palabras en el titulo', x= 'Cantidad de palabras en el titulo', y='Cantidad de noticias')+
theme(plot.title = element_text(face='bold'))
prob_kmax = predict(fakenews_model_kmax, newdata = new_data, type='prob')
fakenews_model_kmax
fakenews_model_kmax = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_maximo)
fakenews_model = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
#reduzco base para trabajar mejor
fake_news2 = fake_news %>%
select(type, title_has_excl, negative, title_words)
#BASES TRAIN Y TEST
set.seed(123)
fakenews_train = fake_news2 %>%
sample_frac(0.8,replace = F)
fakenews_test = anti_join(fake_news2,fakenews_train) #??
k = 1:120
resultado = data.frame(k, precision = 0)
for (n in k){
fakenews_model = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
resultado$precision[n] = mean(fakenews_model == fakenews_test[, 1])
}
k_maximo = resultado$k[order(resultado$precision, decreasing = TRUE)[1]]
fakenews_model_kmax = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_maximo)
precision_kmax = mean(fakenews_model_kmax == fakenews_test[, 1])
#MATRIZ DE CONFUSION
table(fakenews_model_kmax,fakenews_test[, 1])
k_segundo = resultado$k[order(resultado$precision, decreasing = TRUE)[2]]
fakenews_model_2k = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_segundo)
precision_2k = mean(fakenews_model_2k == fakenews_test[, 1])
#MATRIZ DE CONFUSION
table(fakenews_model_2k,fakenews_test[, 1])
#GRAFICO DE EVOLUCION DE LAS K EN FUNCION DE LA PRECISION
resultado %>%
ggplot(aes(k,precision))+
geom_line()+
geom_vline(xintercept = k_maximo,
linetype = 2,
color = 2)+
geom_vline(xintercept = k_segundo,
linetype = 2,
color= 4)+
geom_hline(yintercept = precision_kmax,
linetype = 2,
color = 2)+
geom_hline(yintercept = precision_2k,
linetype = 2,
color= 4)+
geom_point(aes(k_maximo,precision_kmax), color = 'red')+
geom_point(aes(k_segundo,precision_2k), color = 'blue')+
labs(title = 'Evolución de la precisión según K elegido para el modelo')
new_data = data.frame(type = NA,
title_has_excl= FALSE,
negative = 6.00,
title_words = 15)
prob_kmax = predict(fakenews_model_kmax, newdata = new_data, type='prob')
#MATRIZ DE CONFUSION
table(fakenews_model_2k,fakenews_test[, 1])
new_data = data.frame(type = NA,
title_has_excl= FALSE,
negative = 6.00,
title_words = 15)
prob_kmax = predict(fakenews_model_kmax, newdata = new_data, type='prob')
fake_news= fake_news %>%
mutate(categoria_negativa = cut(negative, breaks=c(-Inf, 2,4,6,8,Inf), labels = c('Menor a 2%','2% a 4%', '4% a 6%', '6% a 8%','Más de 8%')))%>%
mutate(cantidad_palabras_titulo = cut(title_words, breaks=c(-Inf, 5,10,15,20,Inf), labels = c('Menor a 5','5 a 10', '10 a 15', '15 a 20','Más de 20')))
#reduzco base para trabajar mejor
fake_news2 = fake_news %>%
select(type, title_has_excl, negative, title_words)
#BASES TRAIN Y TEST
set.seed(123)
fakenews_train = fake_news2 %>%
sample_frac(0.8,replace = F)
fakenews_test = anti_join(fake_news2,fakenews_train) #??
k = 1:120
resultado = data.frame(k, precision = 0)
for (n in k){
fakenews_model = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
resultado$precision[n] = mean(fakenews_model == fakenews_test[, 1])
}
fakenews_model = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=n)
k_maximo = resultado$k[order(resultado$precision, decreasing = TRUE)[1]]
fakenews_model_kmax = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_maximo)
precision_kmax = mean(fakenews_model_kmax == fakenews_test[, 1])
#MATRIZ DE CONFUSION
table(fakenews_model_kmax,fakenews_test[, 1])
k_segundo = resultado$k[order(resultado$precision, decreasing = TRUE)[2]]
fakenews_model_2k = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_segundo)
precision_2k = mean(fakenews_model_2k == fakenews_test[, 1])
new_data = data.frame(type = NA,
title_has_excl= FALSE,
negative = 6.00,
title_words = 15)
prob_kmax = predict(fakenews_model_kmax, newdata = new_data, type='prob')
prob_kmax = predict(fakenews_model_kmax, newdata = test_fn, type='prob')
fakenews_model_2k = knn(train=fakenews_train[, -1],
cl=fakenews_train[, 1],
test=fakenews_test[, -1],
k=k_segundo,
, type='prob')
